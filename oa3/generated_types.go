// Package oa3 provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oa3

import (
	"encoding/json"
	"fmt"
	"time"

	"github.com/pkg/errors"
)

const (
	Jwt_tokenScopes  = "jwt_token.Scopes"
	Basic_authScopes = "basic_auth.Scopes"
)

// ActionRun defines model for ActionRun.
type ActionRun struct {
	Branch    string     `json:"branch"`
	CommitId  string     `json:"commit_id"`
	EndTime   *time.Time `json:"end_time,omitempty"`
	EventType *string    `json:"event_type,omitempty"`
	RunId     string     `json:"run_id"`
	StartTime *time.Time `json:"start_time,omitempty"`
	Status    *string    `json:"status,omitempty"`
}

// ActionRunList defines model for ActionRunList.
type ActionRunList struct {
	Pagination Pagination  `json:"pagination"`
	Results    []ActionRun `json:"results"`
}

// BranchCreation defines model for BranchCreation.
type BranchCreation struct {
	Name   string `json:"name"`
	Source string `json:"source"`
}

// Commit defines model for Commit.
type Commit struct {
	Committer    string           `json:"committer"`
	CreationDate int64            `json:"creation_date"`
	Id           string           `json:"id"`
	Message      string           `json:"message"`
	MetaRangeId  *string          `json:"meta_range_id,omitempty"`
	Metadata     *Commit_Metadata `json:"metadata,omitempty"`
	Parents      []string         `json:"parents"`
}

// Commit_Metadata defines model for Commit.Metadata.
type Commit_Metadata struct {
	AdditionalProperties map[string]string `json:"-"`
}

// CommitCreation defines model for CommitCreation.
type CommitCreation struct {
	Message  string                   `json:"message"`
	Metadata *CommitCreation_Metadata `json:"metadata,omitempty"`
}

// CommitCreation_Metadata defines model for CommitCreation.Metadata.
type CommitCreation_Metadata struct {
	AdditionalProperties map[string]string `json:"-"`
}

// CommitList defines model for CommitList.
type CommitList struct {
	Pagination Pagination `json:"pagination"`
	Results    []Commit   `json:"results"`
}

// Config defines model for Config.
type Config struct {
	BlockstoreNamespaceValidityRegex string `json:"blockstore_namespace_ValidityRegex"`
	BlockstoreNamespaceExample       string `json:"blockstore_namespace_example"`
}

// Credentials defines model for Credentials.
type Credentials struct {
	AccessKeyId  string `json:"access_key_id"`
	CreationDate int64  `json:"creation_date"`
}

// CredentialsList defines model for CredentialsList.
type CredentialsList struct {
	Pagination Pagination    `json:"pagination"`
	Results    []Credentials `json:"results"`
}

// CredentialsWithSecret defines model for CredentialsWithSecret.
type CredentialsWithSecret struct {
	AccessKeyId     string `json:"access_key_id"`
	AccessSecretKey string `json:"access_secret_key"`
	CreationDate    int64  `json:"creation_date"`
}

// Diff defines model for Diff.
type Diff struct {
	Path string `json:"path"`
	Type string `json:"type"`
}

// DiffList defines model for DiffList.
type DiffList struct {
	Pagination Pagination `json:"pagination"`
	Results    []Diff     `json:"results"`
}

// Error defines model for Error.
type Error struct {

	// short message explaining the error
	Message string `json:"message"`
}

// Group defines model for Group.
type Group struct {
	CreationDate int64  `json:"creation_date"`
	Id           string `json:"id"`
}

// GroupCreation defines model for GroupCreation.
type GroupCreation struct {
	Id string `json:"id"`
}

// GroupList defines model for GroupList.
type GroupList struct {
	Pagination Pagination `json:"pagination"`
	Results    []Group    `json:"results"`
}

// Merge defines model for Merge.
type Merge struct {
	Message  string          `json:"message"`
	Metadata *Merge_Metadata `json:"metadata,omitempty"`
}

// Merge_Metadata defines model for Merge.Metadata.
type Merge_Metadata struct {
	AdditionalProperties map[string]string `json:"-"`
}

// MergeResult defines model for MergeResult.
type MergeResult struct {
	Reference string `json:"reference"`
	Summary   struct {
		Added    int `json:"added"`
		Changed  int `json:"changed"`
		Conflict int `json:"conflict"`
		Removed  int `json:"removed"`
	} `json:"summary"`
}

// ObjectStageCreation defines model for ObjectStageCreation.
type ObjectStageCreation struct {
	Checksum        string                        `json:"checksum"`
	Metadata        *ObjectStageCreation_Metadata `json:"metadata,omitempty"`
	PhysicalAddress string                        `json:"physical_address"`
	SizeBytes       int64                         `json:"size_bytes"`
}

// ObjectStageCreation_Metadata defines model for ObjectStageCreation.Metadata.
type ObjectStageCreation_Metadata struct {
	AdditionalProperties map[string]string `json:"-"`
}

// ObjectStats defines model for ObjectStats.
type ObjectStats struct {
	Checksum        string `json:"checksum"`
	Mtime           int64  `json:"mtime"`
	Path            string `json:"path"`
	PhysicalAddress string `json:"physical_address"`
	SizeBytes       *int64 `json:"size_bytes,omitempty"`
}

// ObjectStatsList defines model for ObjectStatsList.
type ObjectStatsList struct {
	Pagination Pagination    `json:"pagination"`
	Results    []ObjectStats `json:"results"`
}

// Pagination defines model for Pagination.
type Pagination struct {
	HasMore    bool   `json:"has_more"`
	MaxPerPage int    `json:"max_per_page"`
	NextOffset string `json:"next_offset"`
	Results    int    `json:"results"`
}

// Policy defines model for Policy.
type Policy struct {
	CreationDate *int64      `json:"creation_date,omitempty"`
	Id           string      `json:"id"`
	Statement    []Statement `json:"statement"`
}

// PolicyList defines model for PolicyList.
type PolicyList struct {
	Pagination Pagination `json:"pagination"`
	Results    []Policy   `json:"results"`
}

// Ref defines model for Ref.
type Ref struct {
	CommitId string `json:"commit_id"`
	Id       string `json:"id"`
}

// RefList defines model for RefList.
type RefList struct {
	Pagination Pagination `json:"pagination"`
	Results    []Ref      `json:"results"`
}

// RefsDump defines model for RefsDump.
type RefsDump struct {
	BranchesMetaRangeId string `json:"branches_meta_range_id"`
	CommitsMetaRangeId  string `json:"commits_meta_range_id"`
	TagsMetaRangeId     string `json:"tags_meta_range_id"`
}

// Repository defines model for Repository.
type Repository struct {
	CreationDate  int64  `json:"creation_date"`
	DefaultBranch string `json:"default_branch"`
	Id            string `json:"id"`

	// Filesystem URI to store the underlying data in (e.g. 's3://my-bucket/some/path/')
	StorageNamespace string `json:"storage_namespace"`
}

// RepositoryCreation defines model for RepositoryCreation.
type RepositoryCreation struct {
	DefaultBranch *string `json:"default_branch,omitempty"`
	Name          string  `json:"name"`

	// Filesystem URI to store the underlying data in (e.g. 's3://my-bucket/some/path/')
	StorageNamespace string `json:"storage_namespace"`
}

// RepositoryList defines model for RepositoryList.
type RepositoryList struct {
	Pagination Pagination   `json:"pagination"`
	Results    []Repository `json:"results"`
}

// ResetCreation defines model for ResetCreation.
type ResetCreation struct {
	Commit *string `json:"commit,omitempty"`
	Path   *string `json:"path,omitempty"`
	Type   string  `json:"type"`
}

// RevertCreation defines model for RevertCreation.
type RevertCreation struct {

	// when reverting a merge commit, the parent number (starting from 1) relative to which to perform the revert.
	ParentNumber int `json:"parent_number"`

	// the commit to revert, given by a ref
	Ref string `json:"ref"`
}

// Setup defines model for Setup.
type Setup struct {

	// set to pass access_key_id, secret_access_key for testing.
	Key *struct {

		// access key ID to set for user for use in integration testing.
		AccessKeyId string `json:"access_key_id"`

		// secret access key to set for user for use in integration testing.
		SecretAccessKey string `json:"secret_access_key"`
	} `json:"key,omitempty"`

	// an identifier for the user (e.g. jane.doe)
	Username string `json:"username"`
}

// Statement defines model for Statement.
type Statement struct {
	Action   []string `json:"action"`
	Effect   string   `json:"effect"`
	Resource string   `json:"resource"`
}

// StorageURI defines model for StorageURI.
type StorageURI struct {
	Location string `json:"location"`
}

// TagCreation defines model for TagCreation.
type TagCreation struct {
	Id  string `json:"id"`
	Ref string `json:"ref"`
}

// UnderlyingObjectProperties defines model for UnderlyingObjectProperties.
type UnderlyingObjectProperties struct {
	StorageClass *string `json:"storage_class,omitempty"`
}

// User defines model for User.
type User struct {
	CreationDate int64  `json:"creation_date"`
	Id           string `json:"id"`
}

// UserCreation defines model for UserCreation.
type UserCreation struct {
	Id string `json:"id"`
}

// UserList defines model for UserList.
type UserList struct {
	Pagination Pagination `json:"pagination"`
	Results    []User     `json:"results"`
}

// PaginationAfter defines model for PaginationAfter.
type PaginationAfter string

// PaginationAmount defines model for PaginationAmount.
type PaginationAmount int

// NotFound defines model for NotFound.
type NotFound Error

// ServerError defines model for ServerError.
type ServerError Error

// Unauthorized defines model for Unauthorized.
type Unauthorized Error

// ValidationError defines model for ValidationError.
type ValidationError Error

// ListGroupsParams defines parameters for ListGroups.
type ListGroupsParams struct {

	// return items after this value
	After *PaginationAfter `json:"after,omitempty"`

	// how many items to return
	Amount *PaginationAmount `json:"amount,omitempty"`
}

// CreateGroupJSONBody defines parameters for CreateGroup.
type CreateGroupJSONBody GroupCreation

// ListGroupMembersParams defines parameters for ListGroupMembers.
type ListGroupMembersParams struct {

	// return items after this value
	After *PaginationAfter `json:"after,omitempty"`

	// how many items to return
	Amount *PaginationAmount `json:"amount,omitempty"`
}

// ListGroupPoliciesParams defines parameters for ListGroupPolicies.
type ListGroupPoliciesParams struct {

	// return items after this value
	After *PaginationAfter `json:"after,omitempty"`

	// how many items to return
	Amount *PaginationAmount `json:"amount,omitempty"`
}

// ListPoliciesParams defines parameters for ListPolicies.
type ListPoliciesParams struct {

	// return items after this value
	After *PaginationAfter `json:"after,omitempty"`

	// how many items to return
	Amount *PaginationAmount `json:"amount,omitempty"`
}

// CreatePolicyJSONBody defines parameters for CreatePolicy.
type CreatePolicyJSONBody Policy

// UpdatePolicyJSONBody defines parameters for UpdatePolicy.
type UpdatePolicyJSONBody Policy

// ListUsersParams defines parameters for ListUsers.
type ListUsersParams struct {

	// return items after this value
	After *PaginationAfter `json:"after,omitempty"`

	// how many items to return
	Amount *PaginationAmount `json:"amount,omitempty"`
}

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody UserCreation

// ListUserCredentialsParams defines parameters for ListUserCredentials.
type ListUserCredentialsParams struct {

	// return items after this value
	After *PaginationAfter `json:"after,omitempty"`

	// how many items to return
	Amount *PaginationAmount `json:"amount,omitempty"`
}

// ListUserGroupsParams defines parameters for ListUserGroups.
type ListUserGroupsParams struct {

	// return items after this value
	After *PaginationAfter `json:"after,omitempty"`

	// how many items to return
	Amount *PaginationAmount `json:"amount,omitempty"`
}

// ListUserPoliciesParams defines parameters for ListUserPolicies.
type ListUserPoliciesParams struct {

	// return items after this value
	After *PaginationAfter `json:"after,omitempty"`

	// how many items to return
	Amount *PaginationAmount `json:"amount,omitempty"`

	// will return all distinct policies attached to the user or any of its groups
	Effective *bool `json:"effective,omitempty"`
}

// ListRepositoriesParams defines parameters for ListRepositories.
type ListRepositoriesParams struct {

	// return items after this value
	After *PaginationAfter `json:"after,omitempty"`

	// how many items to return
	Amount *PaginationAmount `json:"amount,omitempty"`
}

// CreateRepositoryJSONBody defines parameters for CreateRepository.
type CreateRepositoryJSONBody RepositoryCreation

// CreateRepositoryParams defines parameters for CreateRepository.
type CreateRepositoryParams struct {

	// If true, create a bare repository with no initial commit and branch
	Bare *bool `json:"bare,omitempty"`
}

// ListRepositoryRunsParams defines parameters for ListRepositoryRuns.
type ListRepositoryRunsParams struct {

	// return items after this value
	After *PaginationAfter `json:"after,omitempty"`

	// how many items to return
	Amount *PaginationAmount `json:"amount,omitempty"`
	Branch *string           `json:"branch,omitempty"`
}

// ListRunHooksParams defines parameters for ListRunHooks.
type ListRunHooksParams struct {

	// return items after this value
	After *PaginationAfter `json:"after,omitempty"`

	// how many items to return
	Amount *PaginationAmount `json:"amount,omitempty"`
}

// ListBranchesParams defines parameters for ListBranches.
type ListBranchesParams struct {

	// return items after this value
	After *PaginationAfter `json:"after,omitempty"`

	// how many items to return
	Amount *PaginationAmount `json:"amount,omitempty"`
}

// CreateBranchJSONBody defines parameters for CreateBranch.
type CreateBranchJSONBody BranchCreation

// ResetBranchJSONBody defines parameters for ResetBranch.
type ResetBranchJSONBody ResetCreation

// CommitJSONBody defines parameters for Commit.
type CommitJSONBody CommitCreation

// DiffBranchParams defines parameters for DiffBranch.
type DiffBranchParams struct {

	// return items after this value
	After *PaginationAfter `json:"after,omitempty"`

	// how many items to return
	Amount *PaginationAmount `json:"amount,omitempty"`
}

// DeleteObjectParams defines parameters for DeleteObject.
type DeleteObjectParams struct {
	Path string `json:"path"`
}

// UploadObjectParams defines parameters for UploadObject.
type UploadObjectParams struct {
	Path         string  `json:"path"`
	StorageClass *string `json:"storageClass,omitempty"`
}

// StageObjectJSONBody defines parameters for StageObject.
type StageObjectJSONBody ObjectStageCreation

// StageObjectParams defines parameters for StageObject.
type StageObjectParams struct {
	Path string `json:"path"`
}

// RevertBranchJSONBody defines parameters for RevertBranch.
type RevertBranchJSONBody RevertCreation

// RestoreRefsJSONBody defines parameters for RestoreRefs.
type RestoreRefsJSONBody RefsDump

// CreateSymlinkFileParams defines parameters for CreateSymlinkFile.
type CreateSymlinkFileParams struct {

	// path to the table data
	Location *string `json:"location,omitempty"`
}

// DiffRefsParams defines parameters for DiffRefs.
type DiffRefsParams struct {

	// return items after this value
	After *PaginationAfter `json:"after,omitempty"`

	// how many items to return
	Amount   *PaginationAmount `json:"amount,omitempty"`
	Type     *string           `json:"type,omitempty"`
	DiffType *string           `json:"diff_type,omitempty"`
}

// LogCommitsParams defines parameters for LogCommits.
type LogCommitsParams struct {

	// return items after this value
	After *PaginationAfter `json:"after,omitempty"`

	// how many items to return
	Amount *PaginationAmount `json:"amount,omitempty"`
}

// GetObjectParams defines parameters for GetObject.
type GetObjectParams struct {
	Path string `json:"path"`
}

// ListObjectsParams defines parameters for ListObjects.
type ListObjectsParams struct {
	Prefix *string `json:"prefix,omitempty"`

	// return items after this value
	After *PaginationAfter `json:"after,omitempty"`

	// how many items to return
	Amount    *PaginationAmount `json:"amount,omitempty"`
	Delimiter *string           `json:"delimiter,omitempty"`
}

// StatObjectParams defines parameters for StatObject.
type StatObjectParams struct {
	Path string `json:"path"`
}

// GetUnderlyingPropertiesParams defines parameters for GetUnderlyingProperties.
type GetUnderlyingPropertiesParams struct {
	Path string `json:"path"`
}

// MergeIntoBranchJSONBody defines parameters for MergeIntoBranch.
type MergeIntoBranchJSONBody Merge

// ListTagsParams defines parameters for ListTags.
type ListTagsParams struct {

	// return items after this value
	After *PaginationAfter `json:"after,omitempty"`

	// how many items to return
	Amount *PaginationAmount `json:"amount,omitempty"`
}

// CreateTagsJSONBody defines parameters for CreateTags.
type CreateTagsJSONBody TagCreation

// SetupJSONBody defines parameters for Setup.
type SetupJSONBody Setup

// CreateGroupJSONRequestBody defines body for CreateGroup for application/json ContentType.
type CreateGroupJSONRequestBody CreateGroupJSONBody

// CreatePolicyJSONRequestBody defines body for CreatePolicy for application/json ContentType.
type CreatePolicyJSONRequestBody CreatePolicyJSONBody

// UpdatePolicyJSONRequestBody defines body for UpdatePolicy for application/json ContentType.
type UpdatePolicyJSONRequestBody UpdatePolicyJSONBody

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody CreateUserJSONBody

// CreateRepositoryJSONRequestBody defines body for CreateRepository for application/json ContentType.
type CreateRepositoryJSONRequestBody CreateRepositoryJSONBody

// CreateBranchJSONRequestBody defines body for CreateBranch for application/json ContentType.
type CreateBranchJSONRequestBody CreateBranchJSONBody

// ResetBranchJSONRequestBody defines body for ResetBranch for application/json ContentType.
type ResetBranchJSONRequestBody ResetBranchJSONBody

// CommitJSONRequestBody defines body for Commit for application/json ContentType.
type CommitJSONRequestBody CommitJSONBody

// StageObjectJSONRequestBody defines body for StageObject for application/json ContentType.
type StageObjectJSONRequestBody StageObjectJSONBody

// RevertBranchJSONRequestBody defines body for RevertBranch for application/json ContentType.
type RevertBranchJSONRequestBody RevertBranchJSONBody

// RestoreRefsJSONRequestBody defines body for RestoreRefs for application/json ContentType.
type RestoreRefsJSONRequestBody RestoreRefsJSONBody

// MergeIntoBranchJSONRequestBody defines body for MergeIntoBranch for application/json ContentType.
type MergeIntoBranchJSONRequestBody MergeIntoBranchJSONBody

// CreateTagsJSONRequestBody defines body for CreateTags for application/json ContentType.
type CreateTagsJSONRequestBody CreateTagsJSONBody

// SetupJSONRequestBody defines body for Setup for application/json ContentType.
type SetupJSONRequestBody SetupJSONBody

// Getter for additional properties for Commit_Metadata. Returns the specified
// element and whether it was found
func (a Commit_Metadata) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Commit_Metadata
func (a *Commit_Metadata) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Commit_Metadata to handle AdditionalProperties
func (a *Commit_Metadata) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Commit_Metadata to handle AdditionalProperties
func (a Commit_Metadata) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CommitCreation_Metadata. Returns the specified
// element and whether it was found
func (a CommitCreation_Metadata) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CommitCreation_Metadata
func (a *CommitCreation_Metadata) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CommitCreation_Metadata to handle AdditionalProperties
func (a *CommitCreation_Metadata) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CommitCreation_Metadata to handle AdditionalProperties
func (a CommitCreation_Metadata) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Merge_Metadata. Returns the specified
// element and whether it was found
func (a Merge_Metadata) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Merge_Metadata
func (a *Merge_Metadata) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Merge_Metadata to handle AdditionalProperties
func (a *Merge_Metadata) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Merge_Metadata to handle AdditionalProperties
func (a Merge_Metadata) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ObjectStageCreation_Metadata. Returns the specified
// element and whether it was found
func (a ObjectStageCreation_Metadata) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ObjectStageCreation_Metadata
func (a *ObjectStageCreation_Metadata) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ObjectStageCreation_Metadata to handle AdditionalProperties
func (a *ObjectStageCreation_Metadata) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ObjectStageCreation_Metadata to handle AdditionalProperties
func (a ObjectStageCreation_Metadata) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

