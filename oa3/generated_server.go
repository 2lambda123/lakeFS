// Package oa3 provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oa3

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// list groups
	// (GET /auth/groups)
	ListGroups(ctx echo.Context, params ListGroupsParams) error
	// create group
	// (POST /auth/groups)
	CreateGroup(ctx echo.Context) error
	// delete group
	// (DELETE /auth/groups/{groupId})
	DeleteGroup(ctx echo.Context, groupId string) error
	// get group
	// (GET /auth/groups/{groupId})
	GetGroup(ctx echo.Context, groupId string) error
	// list group members
	// (GET /auth/groups/{groupId}/members)
	ListGroupMembers(ctx echo.Context, groupId string, params ListGroupMembersParams) error
	// delete group membership
	// (DELETE /auth/groups/{groupId}/members/{userId})
	DeleteGroupMembership(ctx echo.Context, groupId string, userId string) error
	// add group membership
	// (PUT /auth/groups/{groupId}/members/{userId})
	AddGroupMembership(ctx echo.Context, groupId string, userId string) error
	// list group policies
	// (GET /auth/groups/{groupId}/policies)
	ListGroupPolicies(ctx echo.Context, groupId string, params ListGroupPoliciesParams) error
	// detach policy from group
	// (DELETE /auth/groups/{groupId}/policies/{policyId})
	DetachPolicyFromGroup(ctx echo.Context, groupId string, policyId string) error
	// attach policy to group
	// (PUT /auth/groups/{groupId}/policies/{policyId})
	AttachPolicyToGroup(ctx echo.Context, groupId string, policyId string) error
	// list policies
	// (GET /auth/policies)
	ListPolicies(ctx echo.Context, params ListPoliciesParams) error
	// create policy
	// (POST /auth/policies)
	CreatePolicy(ctx echo.Context) error
	// delete policy
	// (DELETE /auth/policies/{policyId})
	DeletePolicy(ctx echo.Context, policyId string) error
	// get policy
	// (GET /auth/policies/{policyId})
	GetPolicy(ctx echo.Context, policyId string) error
	// update policy
	// (PUT /auth/policies/{policyId})
	UpdatePolicy(ctx echo.Context, policyId string) error
	// list users
	// (GET /auth/users)
	ListUsers(ctx echo.Context, params ListUsersParams) error
	// create user
	// (POST /auth/users)
	CreateUser(ctx echo.Context) error
	// delete user
	// (DELETE /auth/users/{userId})
	DeleteUser(ctx echo.Context, userId string) error
	// get user
	// (GET /auth/users/{userId})
	GetUser(ctx echo.Context, userId string) error
	// list user credentials
	// (GET /auth/users/{userId}/credentials)
	ListUserCredentials(ctx echo.Context, userId string, params ListUserCredentialsParams) error
	// create credentials
	// (POST /auth/users/{userId}/credentials)
	CreateCredentials(ctx echo.Context, userId string) error
	// delete credentials
	// (DELETE /auth/users/{userId}/credentials/{accessKeyId})
	DeleteCredentials(ctx echo.Context, userId string, accessKeyId string) error
	// get credentials
	// (GET /auth/users/{userId}/credentials/{accessKeyId})
	GetCredentials(ctx echo.Context, userId string, accessKeyId string) error
	// list user groups
	// (GET /auth/users/{userId}/groups)
	ListUserGroups(ctx echo.Context, userId string, params ListUserGroupsParams) error
	// list user policies
	// (GET /auth/users/{userId}/policies)
	ListUserPolicies(ctx echo.Context, userId string, params ListUserPoliciesParams) error
	// detach policy from user
	// (DELETE /auth/users/{userId}/policies/{policyId})
	DetachPolicyFromUser(ctx echo.Context, userId string, policyId string) error
	// attach policy to user
	// (PUT /auth/users/{userId}/policies/{policyId})
	AttachPolicyToUser(ctx echo.Context, userId string, policyId string) error

	// (GET /config)
	GetConfig(ctx echo.Context) error

	// (GET /healthcheck)
	HealthCheck(ctx echo.Context) error
	// list repositories
	// (GET /repositories)
	ListRepositories(ctx echo.Context, params ListRepositoriesParams) error
	// create repository
	// (POST /repositories)
	CreateRepository(ctx echo.Context, params CreateRepositoryParams) error
	// delete repository
	// (DELETE /repositories/{repository})
	DeleteRepository(ctx echo.Context, repository string) error
	// get repository
	// (GET /repositories/{repository})
	GetRepository(ctx echo.Context, repository string) error
	// list runs
	// (GET /repositories/{repository}/actions/runs)
	ListRepositoryRuns(ctx echo.Context, repository string, params ListRepositoryRunsParams) error
	// get a run
	// (GET /repositories/{repository}/actions/runs/{run_id})
	GetRun(ctx echo.Context, repository string, runId string) error
	// list run hooks
	// (GET /repositories/{repository}/actions/runs/{run_id}/hooks)
	ListRunHooks(ctx echo.Context, repository string, runId string, params ListRunHooksParams) error
	// get run hook output
	// (GET /repositories/{repository}/actions/runs/{run_id}/hooks/{hook_run_id}/output)
	GetRunHookOutput(ctx echo.Context, repository string, runId string, hookRunId string) error
	// list branches
	// (GET /repositories/{repository}/branches)
	ListBranches(ctx echo.Context, repository string, params ListBranchesParams) error
	// create branch
	// (POST /repositories/{repository}/branches)
	CreateBranch(ctx echo.Context, repository string) error
	// delete branch
	// (DELETE /repositories/{repository}/branches/{branch})
	DeleteBranch(ctx echo.Context, repository string, branch string) error
	// get branch
	// (GET /repositories/{repository}/branches/{branch})
	GetBranch(ctx echo.Context, repository string, branch string) error
	// reset branch
	// (PUT /repositories/{repository}/branches/{branch})
	ResetBranch(ctx echo.Context, repository string, branch string) error
	// create commit
	// (POST /repositories/{repository}/branches/{branch}/commits)
	Commit(ctx echo.Context, repository string, branch string) error
	// diff branch
	// (GET /repositories/{repository}/branches/{branch}/diff)
	DiffBranch(ctx echo.Context, repository string, branch string, params DiffBranchParams) error
	// delete object
	// (DELETE /repositories/{repository}/branches/{branch}/objects)
	DeleteObject(ctx echo.Context, repository string, branch string, params DeleteObjectParams) error
	// upload object content
	// (POST /repositories/{repository}/branches/{branch}/objects)
	UploadObject(ctx echo.Context, repository string, branch string, params UploadObjectParams) error
	// stage an object's metadata for the given branch
	// (PUT /repositories/{repository}/branches/{branch}/objects)
	StageObject(ctx echo.Context, repository string, branch string, params StageObjectParams) error
	// revert
	// (POST /repositories/{repository}/branches/{branch}/revert)
	RevertBranch(ctx echo.Context, repository string, branch string) error
	// get commit
	// (GET /repositories/{repository}/commits/{commitId})
	GetCommit(ctx echo.Context, repository string, commitId string) error
	// list commit runs
	// (GET /repositories/{repository}/commits/{commitId}/runs)
	ListCommitRuns(ctx echo.Context, repository string, commitId string) error
	// return URI to a meta-range file
	// (GET /repositories/{repository}/metadata/meta_range/{meta_range})
	GetMetaRange(ctx echo.Context, repository string, metaRange string) error
	// return URI to a range file
	// (GET /repositories/{repository}/metadata/range/{range})
	GetRange(ctx echo.Context, repository string, pRange string) error
	// Dump repository refs (tags, commits, branches) to object store
	// (PUT /repositories/{repository}/refs/dump)
	DumpRefs(ctx echo.Context, repository string) error
	// Restore repository refs (tags, commits, branches) from object store
	// (PUT /repositories/{repository}/refs/restore)
	RestoreRefs(ctx echo.Context, repository string) error
	// creates symlink files corresponding to the given directory
	// (POST /repositories/{repository}/refs/{branch}/symlink)
	CreateSymlinkFile(ctx echo.Context, repository string, branch string, params CreateSymlinkFileParams) error
	// diff references
	// (GET /repositories/{repository}/refs/{leftRef}/diff/{rightRef})
	DiffRefs(ctx echo.Context, repository string, leftRef string, rightRef string, params DiffRefsParams) error
	// get commit log from ref
	// (GET /repositories/{repository}/refs/{ref}/commits)
	LogCommits(ctx echo.Context, repository string, ref string, params LogCommitsParams) error
	// get object content
	// (GET /repositories/{repository}/refs/{ref}/objects)
	GetObject(ctx echo.Context, repository string, ref string, params GetObjectParams) error
	// list objects under a given prefix
	// (GET /repositories/{repository}/refs/{ref}/objects/ls)
	ListObjects(ctx echo.Context, repository string, ref string, params ListObjectsParams) error
	// get object metadata
	// (GET /repositories/{repository}/refs/{ref}/objects/stat)
	StatObject(ctx echo.Context, repository string, ref string, params StatObjectParams) error
	// get object properties on underlying storage
	// (GET /repositories/{repository}/refs/{ref}/objects/underlyingProperties)
	GetUnderlyingProperties(ctx echo.Context, repository string, ref string, params GetUnderlyingPropertiesParams) error
	// merge references
	// (POST /repositories/{repository}/refs/{sourceRef}/merge/{destinationBranch})
	MergeIntoBranch(ctx echo.Context, repository string, sourceRef string, destinationBranch string) error
	// list tags
	// (GET /repositories/{repository}/tags)
	ListTags(ctx echo.Context, repository string, params ListTagsParams) error
	// create tag
	// (POST /repositories/{repository}/tags)
	CreateTags(ctx echo.Context, repository string) error
	// delete tag
	// (DELETE /repositories/{repository}/tags/{tag})
	DeleteTag(ctx echo.Context, repository string, tag string) error
	// get tag
	// (GET /repositories/{repository}/tags/{tag})
	GetTag(ctx echo.Context, repository string, tag string) error
	// setup lakeFS and create a first user
	// (POST /setup_lakefs)
	Setup(ctx echo.Context) error
	// get current user
	// (GET /user)
	GetCurrentUser(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListGroups converts echo context to params.
func (w *ServerInterfaceWrapper) ListGroups(ctx echo.Context) error {
	var err error

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListGroupsParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "amount" -------------

	err = runtime.BindQueryParameter("form", true, false, "amount", ctx.QueryParams(), &params.Amount)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter amount: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListGroups(ctx, params)
	return err
}

// CreateGroup converts echo context to params.
func (w *ServerInterfaceWrapper) CreateGroup(ctx echo.Context) error {
	var err error

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateGroup(ctx)
	return err
}

// DeleteGroup converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameter("simple", false, "groupId", ctx.Param("groupId"), &groupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupId: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteGroup(ctx, groupId)
	return err
}

// GetGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameter("simple", false, "groupId", ctx.Param("groupId"), &groupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupId: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGroup(ctx, groupId)
	return err
}

// ListGroupMembers converts echo context to params.
func (w *ServerInterfaceWrapper) ListGroupMembers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameter("simple", false, "groupId", ctx.Param("groupId"), &groupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupId: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListGroupMembersParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "amount" -------------

	err = runtime.BindQueryParameter("form", true, false, "amount", ctx.QueryParams(), &params.Amount)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter amount: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListGroupMembers(ctx, groupId, params)
	return err
}

// DeleteGroupMembership converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteGroupMembership(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameter("simple", false, "groupId", ctx.Param("groupId"), &groupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupId: %s", err))
	}

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameter("simple", false, "userId", ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteGroupMembership(ctx, groupId, userId)
	return err
}

// AddGroupMembership converts echo context to params.
func (w *ServerInterfaceWrapper) AddGroupMembership(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameter("simple", false, "groupId", ctx.Param("groupId"), &groupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupId: %s", err))
	}

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameter("simple", false, "userId", ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddGroupMembership(ctx, groupId, userId)
	return err
}

// ListGroupPolicies converts echo context to params.
func (w *ServerInterfaceWrapper) ListGroupPolicies(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameter("simple", false, "groupId", ctx.Param("groupId"), &groupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupId: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListGroupPoliciesParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "amount" -------------

	err = runtime.BindQueryParameter("form", true, false, "amount", ctx.QueryParams(), &params.Amount)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter amount: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListGroupPolicies(ctx, groupId, params)
	return err
}

// DetachPolicyFromGroup converts echo context to params.
func (w *ServerInterfaceWrapper) DetachPolicyFromGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameter("simple", false, "groupId", ctx.Param("groupId"), &groupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupId: %s", err))
	}

	// ------------- Path parameter "policyId" -------------
	var policyId string

	err = runtime.BindStyledParameter("simple", false, "policyId", ctx.Param("policyId"), &policyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyId: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DetachPolicyFromGroup(ctx, groupId, policyId)
	return err
}

// AttachPolicyToGroup converts echo context to params.
func (w *ServerInterfaceWrapper) AttachPolicyToGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameter("simple", false, "groupId", ctx.Param("groupId"), &groupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupId: %s", err))
	}

	// ------------- Path parameter "policyId" -------------
	var policyId string

	err = runtime.BindStyledParameter("simple", false, "policyId", ctx.Param("policyId"), &policyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyId: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AttachPolicyToGroup(ctx, groupId, policyId)
	return err
}

// ListPolicies converts echo context to params.
func (w *ServerInterfaceWrapper) ListPolicies(ctx echo.Context) error {
	var err error

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPoliciesParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "amount" -------------

	err = runtime.BindQueryParameter("form", true, false, "amount", ctx.QueryParams(), &params.Amount)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter amount: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPolicies(ctx, params)
	return err
}

// CreatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePolicy(ctx echo.Context) error {
	var err error

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePolicy(ctx)
	return err
}

// DeletePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyId" -------------
	var policyId string

	err = runtime.BindStyledParameter("simple", false, "policyId", ctx.Param("policyId"), &policyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyId: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePolicy(ctx, policyId)
	return err
}

// GetPolicy converts echo context to params.
func (w *ServerInterfaceWrapper) GetPolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyId" -------------
	var policyId string

	err = runtime.BindStyledParameter("simple", false, "policyId", ctx.Param("policyId"), &policyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyId: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPolicy(ctx, policyId)
	return err
}

// UpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyId" -------------
	var policyId string

	err = runtime.BindStyledParameter("simple", false, "policyId", ctx.Param("policyId"), &policyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyId: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePolicy(ctx, policyId)
	return err
}

// ListUsers converts echo context to params.
func (w *ServerInterfaceWrapper) ListUsers(ctx echo.Context) error {
	var err error

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUsersParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "amount" -------------

	err = runtime.BindQueryParameter("form", true, false, "amount", ctx.QueryParams(), &params.Amount)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter amount: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListUsers(ctx, params)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// DeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameter("simple", false, "userId", ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUser(ctx, userId)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameter("simple", false, "userId", ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUser(ctx, userId)
	return err
}

// ListUserCredentials converts echo context to params.
func (w *ServerInterfaceWrapper) ListUserCredentials(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameter("simple", false, "userId", ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUserCredentialsParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "amount" -------------

	err = runtime.BindQueryParameter("form", true, false, "amount", ctx.QueryParams(), &params.Amount)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter amount: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListUserCredentials(ctx, userId, params)
	return err
}

// CreateCredentials converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCredentials(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameter("simple", false, "userId", ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCredentials(ctx, userId)
	return err
}

// DeleteCredentials converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCredentials(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameter("simple", false, "userId", ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// ------------- Path parameter "accessKeyId" -------------
	var accessKeyId string

	err = runtime.BindStyledParameter("simple", false, "accessKeyId", ctx.Param("accessKeyId"), &accessKeyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accessKeyId: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCredentials(ctx, userId, accessKeyId)
	return err
}

// GetCredentials converts echo context to params.
func (w *ServerInterfaceWrapper) GetCredentials(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameter("simple", false, "userId", ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// ------------- Path parameter "accessKeyId" -------------
	var accessKeyId string

	err = runtime.BindStyledParameter("simple", false, "accessKeyId", ctx.Param("accessKeyId"), &accessKeyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter accessKeyId: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCredentials(ctx, userId, accessKeyId)
	return err
}

// ListUserGroups converts echo context to params.
func (w *ServerInterfaceWrapper) ListUserGroups(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameter("simple", false, "userId", ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUserGroupsParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "amount" -------------

	err = runtime.BindQueryParameter("form", true, false, "amount", ctx.QueryParams(), &params.Amount)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter amount: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListUserGroups(ctx, userId, params)
	return err
}

// ListUserPolicies converts echo context to params.
func (w *ServerInterfaceWrapper) ListUserPolicies(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameter("simple", false, "userId", ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUserPoliciesParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "amount" -------------

	err = runtime.BindQueryParameter("form", true, false, "amount", ctx.QueryParams(), &params.Amount)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter amount: %s", err))
	}

	// ------------- Optional query parameter "effective" -------------

	err = runtime.BindQueryParameter("form", true, false, "effective", ctx.QueryParams(), &params.Effective)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter effective: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListUserPolicies(ctx, userId, params)
	return err
}

// DetachPolicyFromUser converts echo context to params.
func (w *ServerInterfaceWrapper) DetachPolicyFromUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameter("simple", false, "userId", ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// ------------- Path parameter "policyId" -------------
	var policyId string

	err = runtime.BindStyledParameter("simple", false, "policyId", ctx.Param("policyId"), &policyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyId: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DetachPolicyFromUser(ctx, userId, policyId)
	return err
}

// AttachPolicyToUser converts echo context to params.
func (w *ServerInterfaceWrapper) AttachPolicyToUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameter("simple", false, "userId", ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// ------------- Path parameter "policyId" -------------
	var policyId string

	err = runtime.BindStyledParameter("simple", false, "policyId", ctx.Param("policyId"), &policyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyId: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AttachPolicyToUser(ctx, userId, policyId)
	return err
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// HealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) HealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.HealthCheck(ctx)
	return err
}

// ListRepositories converts echo context to params.
func (w *ServerInterfaceWrapper) ListRepositories(ctx echo.Context) error {
	var err error

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRepositoriesParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "amount" -------------

	err = runtime.BindQueryParameter("form", true, false, "amount", ctx.QueryParams(), &params.Amount)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter amount: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRepositories(ctx, params)
	return err
}

// CreateRepository converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRepository(ctx echo.Context) error {
	var err error

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateRepositoryParams
	// ------------- Optional query parameter "bare" -------------

	err = runtime.BindQueryParameter("form", true, false, "bare", ctx.QueryParams(), &params.Bare)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bare: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRepository(ctx, params)
	return err
}

// DeleteRepository converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRepository(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameter("simple", false, "repository", ctx.Param("repository"), &repository)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repository: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteRepository(ctx, repository)
	return err
}

// GetRepository converts echo context to params.
func (w *ServerInterfaceWrapper) GetRepository(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameter("simple", false, "repository", ctx.Param("repository"), &repository)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repository: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRepository(ctx, repository)
	return err
}

// ListRepositoryRuns converts echo context to params.
func (w *ServerInterfaceWrapper) ListRepositoryRuns(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameter("simple", false, "repository", ctx.Param("repository"), &repository)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repository: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRepositoryRunsParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "amount" -------------

	err = runtime.BindQueryParameter("form", true, false, "amount", ctx.QueryParams(), &params.Amount)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter amount: %s", err))
	}

	// ------------- Optional query parameter "branch" -------------

	err = runtime.BindQueryParameter("form", true, false, "branch", ctx.QueryParams(), &params.Branch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter branch: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRepositoryRuns(ctx, repository, params)
	return err
}

// GetRun converts echo context to params.
func (w *ServerInterfaceWrapper) GetRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameter("simple", false, "repository", ctx.Param("repository"), &repository)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repository: %s", err))
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameter("simple", false, "run_id", ctx.Param("run_id"), &runId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter run_id: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRun(ctx, repository, runId)
	return err
}

// ListRunHooks converts echo context to params.
func (w *ServerInterfaceWrapper) ListRunHooks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameter("simple", false, "repository", ctx.Param("repository"), &repository)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repository: %s", err))
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameter("simple", false, "run_id", ctx.Param("run_id"), &runId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter run_id: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRunHooksParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "amount" -------------

	err = runtime.BindQueryParameter("form", true, false, "amount", ctx.QueryParams(), &params.Amount)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter amount: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRunHooks(ctx, repository, runId, params)
	return err
}

// GetRunHookOutput converts echo context to params.
func (w *ServerInterfaceWrapper) GetRunHookOutput(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameter("simple", false, "repository", ctx.Param("repository"), &repository)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repository: %s", err))
	}

	// ------------- Path parameter "run_id" -------------
	var runId string

	err = runtime.BindStyledParameter("simple", false, "run_id", ctx.Param("run_id"), &runId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter run_id: %s", err))
	}

	// ------------- Path parameter "hook_run_id" -------------
	var hookRunId string

	err = runtime.BindStyledParameter("simple", false, "hook_run_id", ctx.Param("hook_run_id"), &hookRunId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hook_run_id: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRunHookOutput(ctx, repository, runId, hookRunId)
	return err
}

// ListBranches converts echo context to params.
func (w *ServerInterfaceWrapper) ListBranches(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameter("simple", false, "repository", ctx.Param("repository"), &repository)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repository: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListBranchesParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "amount" -------------

	err = runtime.BindQueryParameter("form", true, false, "amount", ctx.QueryParams(), &params.Amount)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter amount: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListBranches(ctx, repository, params)
	return err
}

// CreateBranch converts echo context to params.
func (w *ServerInterfaceWrapper) CreateBranch(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameter("simple", false, "repository", ctx.Param("repository"), &repository)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repository: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateBranch(ctx, repository)
	return err
}

// DeleteBranch converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteBranch(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameter("simple", false, "repository", ctx.Param("repository"), &repository)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repository: %s", err))
	}

	// ------------- Path parameter "branch" -------------
	var branch string

	err = runtime.BindStyledParameter("simple", false, "branch", ctx.Param("branch"), &branch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter branch: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteBranch(ctx, repository, branch)
	return err
}

// GetBranch converts echo context to params.
func (w *ServerInterfaceWrapper) GetBranch(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameter("simple", false, "repository", ctx.Param("repository"), &repository)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repository: %s", err))
	}

	// ------------- Path parameter "branch" -------------
	var branch string

	err = runtime.BindStyledParameter("simple", false, "branch", ctx.Param("branch"), &branch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter branch: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBranch(ctx, repository, branch)
	return err
}

// ResetBranch converts echo context to params.
func (w *ServerInterfaceWrapper) ResetBranch(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameter("simple", false, "repository", ctx.Param("repository"), &repository)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repository: %s", err))
	}

	// ------------- Path parameter "branch" -------------
	var branch string

	err = runtime.BindStyledParameter("simple", false, "branch", ctx.Param("branch"), &branch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter branch: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ResetBranch(ctx, repository, branch)
	return err
}

// Commit converts echo context to params.
func (w *ServerInterfaceWrapper) Commit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameter("simple", false, "repository", ctx.Param("repository"), &repository)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repository: %s", err))
	}

	// ------------- Path parameter "branch" -------------
	var branch string

	err = runtime.BindStyledParameter("simple", false, "branch", ctx.Param("branch"), &branch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter branch: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Commit(ctx, repository, branch)
	return err
}

// DiffBranch converts echo context to params.
func (w *ServerInterfaceWrapper) DiffBranch(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameter("simple", false, "repository", ctx.Param("repository"), &repository)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repository: %s", err))
	}

	// ------------- Path parameter "branch" -------------
	var branch string

	err = runtime.BindStyledParameter("simple", false, "branch", ctx.Param("branch"), &branch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter branch: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params DiffBranchParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "amount" -------------

	err = runtime.BindQueryParameter("form", true, false, "amount", ctx.QueryParams(), &params.Amount)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter amount: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DiffBranch(ctx, repository, branch, params)
	return err
}

// DeleteObject converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameter("simple", false, "repository", ctx.Param("repository"), &repository)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repository: %s", err))
	}

	// ------------- Path parameter "branch" -------------
	var branch string

	err = runtime.BindStyledParameter("simple", false, "branch", ctx.Param("branch"), &branch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter branch: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteObjectParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteObject(ctx, repository, branch, params)
	return err
}

// UploadObject converts echo context to params.
func (w *ServerInterfaceWrapper) UploadObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameter("simple", false, "repository", ctx.Param("repository"), &repository)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repository: %s", err))
	}

	// ------------- Path parameter "branch" -------------
	var branch string

	err = runtime.BindStyledParameter("simple", false, "branch", ctx.Param("branch"), &branch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter branch: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params UploadObjectParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "storageClass" -------------

	err = runtime.BindQueryParameter("form", true, false, "storageClass", ctx.QueryParams(), &params.StorageClass)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter storageClass: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UploadObject(ctx, repository, branch, params)
	return err
}

// StageObject converts echo context to params.
func (w *ServerInterfaceWrapper) StageObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameter("simple", false, "repository", ctx.Param("repository"), &repository)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repository: %s", err))
	}

	// ------------- Path parameter "branch" -------------
	var branch string

	err = runtime.BindStyledParameter("simple", false, "branch", ctx.Param("branch"), &branch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter branch: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StageObjectParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StageObject(ctx, repository, branch, params)
	return err
}

// RevertBranch converts echo context to params.
func (w *ServerInterfaceWrapper) RevertBranch(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameter("simple", false, "repository", ctx.Param("repository"), &repository)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repository: %s", err))
	}

	// ------------- Path parameter "branch" -------------
	var branch string

	err = runtime.BindStyledParameter("simple", false, "branch", ctx.Param("branch"), &branch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter branch: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RevertBranch(ctx, repository, branch)
	return err
}

// GetCommit converts echo context to params.
func (w *ServerInterfaceWrapper) GetCommit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameter("simple", false, "repository", ctx.Param("repository"), &repository)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repository: %s", err))
	}

	// ------------- Path parameter "commitId" -------------
	var commitId string

	err = runtime.BindStyledParameter("simple", false, "commitId", ctx.Param("commitId"), &commitId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter commitId: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCommit(ctx, repository, commitId)
	return err
}

// ListCommitRuns converts echo context to params.
func (w *ServerInterfaceWrapper) ListCommitRuns(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameter("simple", false, "repository", ctx.Param("repository"), &repository)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repository: %s", err))
	}

	// ------------- Path parameter "commitId" -------------
	var commitId string

	err = runtime.BindStyledParameter("simple", false, "commitId", ctx.Param("commitId"), &commitId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter commitId: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListCommitRuns(ctx, repository, commitId)
	return err
}

// GetMetaRange converts echo context to params.
func (w *ServerInterfaceWrapper) GetMetaRange(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameter("simple", false, "repository", ctx.Param("repository"), &repository)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repository: %s", err))
	}

	// ------------- Path parameter "meta_range" -------------
	var metaRange string

	err = runtime.BindStyledParameter("simple", false, "meta_range", ctx.Param("meta_range"), &metaRange)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter meta_range: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMetaRange(ctx, repository, metaRange)
	return err
}

// GetRange converts echo context to params.
func (w *ServerInterfaceWrapper) GetRange(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameter("simple", false, "repository", ctx.Param("repository"), &repository)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repository: %s", err))
	}

	// ------------- Path parameter "range" -------------
	var pRange string

	err = runtime.BindStyledParameter("simple", false, "range", ctx.Param("range"), &pRange)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter range: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRange(ctx, repository, pRange)
	return err
}

// DumpRefs converts echo context to params.
func (w *ServerInterfaceWrapper) DumpRefs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameter("simple", false, "repository", ctx.Param("repository"), &repository)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repository: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DumpRefs(ctx, repository)
	return err
}

// RestoreRefs converts echo context to params.
func (w *ServerInterfaceWrapper) RestoreRefs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameter("simple", false, "repository", ctx.Param("repository"), &repository)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repository: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RestoreRefs(ctx, repository)
	return err
}

// CreateSymlinkFile converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSymlinkFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameter("simple", false, "repository", ctx.Param("repository"), &repository)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repository: %s", err))
	}

	// ------------- Path parameter "branch" -------------
	var branch string

	err = runtime.BindStyledParameter("simple", false, "branch", ctx.Param("branch"), &branch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter branch: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateSymlinkFileParams
	// ------------- Optional query parameter "location" -------------

	err = runtime.BindQueryParameter("form", true, false, "location", ctx.QueryParams(), &params.Location)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter location: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSymlinkFile(ctx, repository, branch, params)
	return err
}

// DiffRefs converts echo context to params.
func (w *ServerInterfaceWrapper) DiffRefs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameter("simple", false, "repository", ctx.Param("repository"), &repository)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repository: %s", err))
	}

	// ------------- Path parameter "leftRef" -------------
	var leftRef string

	err = runtime.BindStyledParameter("simple", false, "leftRef", ctx.Param("leftRef"), &leftRef)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter leftRef: %s", err))
	}

	// ------------- Path parameter "rightRef" -------------
	var rightRef string

	err = runtime.BindStyledParameter("simple", false, "rightRef", ctx.Param("rightRef"), &rightRef)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rightRef: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params DiffRefsParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "amount" -------------

	err = runtime.BindQueryParameter("form", true, false, "amount", ctx.QueryParams(), &params.Amount)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter amount: %s", err))
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// ------------- Optional query parameter "diff_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "diff_type", ctx.QueryParams(), &params.DiffType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter diff_type: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DiffRefs(ctx, repository, leftRef, rightRef, params)
	return err
}

// LogCommits converts echo context to params.
func (w *ServerInterfaceWrapper) LogCommits(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameter("simple", false, "repository", ctx.Param("repository"), &repository)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repository: %s", err))
	}

	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameter("simple", false, "ref", ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params LogCommitsParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "amount" -------------

	err = runtime.BindQueryParameter("form", true, false, "amount", ctx.QueryParams(), &params.Amount)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter amount: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LogCommits(ctx, repository, ref, params)
	return err
}

// GetObject converts echo context to params.
func (w *ServerInterfaceWrapper) GetObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameter("simple", false, "repository", ctx.Param("repository"), &repository)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repository: %s", err))
	}

	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameter("simple", false, "ref", ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObject(ctx, repository, ref, params)
	return err
}

// ListObjects converts echo context to params.
func (w *ServerInterfaceWrapper) ListObjects(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameter("simple", false, "repository", ctx.Param("repository"), &repository)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repository: %s", err))
	}

	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameter("simple", false, "ref", ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListObjectsParams
	// ------------- Optional query parameter "prefix" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefix", ctx.QueryParams(), &params.Prefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefix: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "amount" -------------

	err = runtime.BindQueryParameter("form", true, false, "amount", ctx.QueryParams(), &params.Amount)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter amount: %s", err))
	}

	// ------------- Optional query parameter "delimiter" -------------

	err = runtime.BindQueryParameter("form", true, false, "delimiter", ctx.QueryParams(), &params.Delimiter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter delimiter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListObjects(ctx, repository, ref, params)
	return err
}

// StatObject converts echo context to params.
func (w *ServerInterfaceWrapper) StatObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameter("simple", false, "repository", ctx.Param("repository"), &repository)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repository: %s", err))
	}

	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameter("simple", false, "ref", ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StatObjectParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StatObject(ctx, repository, ref, params)
	return err
}

// GetUnderlyingProperties converts echo context to params.
func (w *ServerInterfaceWrapper) GetUnderlyingProperties(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameter("simple", false, "repository", ctx.Param("repository"), &repository)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repository: %s", err))
	}

	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameter("simple", false, "ref", ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUnderlyingPropertiesParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUnderlyingProperties(ctx, repository, ref, params)
	return err
}

// MergeIntoBranch converts echo context to params.
func (w *ServerInterfaceWrapper) MergeIntoBranch(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameter("simple", false, "repository", ctx.Param("repository"), &repository)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repository: %s", err))
	}

	// ------------- Path parameter "sourceRef" -------------
	var sourceRef string

	err = runtime.BindStyledParameter("simple", false, "sourceRef", ctx.Param("sourceRef"), &sourceRef)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourceRef: %s", err))
	}

	// ------------- Path parameter "destinationBranch" -------------
	var destinationBranch string

	err = runtime.BindStyledParameter("simple", false, "destinationBranch", ctx.Param("destinationBranch"), &destinationBranch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter destinationBranch: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MergeIntoBranch(ctx, repository, sourceRef, destinationBranch)
	return err
}

// ListTags converts echo context to params.
func (w *ServerInterfaceWrapper) ListTags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameter("simple", false, "repository", ctx.Param("repository"), &repository)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repository: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTagsParams
	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// ------------- Optional query parameter "amount" -------------

	err = runtime.BindQueryParameter("form", true, false, "amount", ctx.QueryParams(), &params.Amount)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter amount: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTags(ctx, repository, params)
	return err
}

// CreateTags converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTags(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameter("simple", false, "repository", ctx.Param("repository"), &repository)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repository: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTags(ctx, repository)
	return err
}

// DeleteTag converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTag(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameter("simple", false, "repository", ctx.Param("repository"), &repository)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repository: %s", err))
	}

	// ------------- Path parameter "tag" -------------
	var tag string

	err = runtime.BindStyledParameter("simple", false, "tag", ctx.Param("tag"), &tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTag(ctx, repository, tag)
	return err
}

// GetTag converts echo context to params.
func (w *ServerInterfaceWrapper) GetTag(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repository" -------------
	var repository string

	err = runtime.BindStyledParameter("simple", false, "repository", ctx.Param("repository"), &repository)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repository: %s", err))
	}

	// ------------- Path parameter "tag" -------------
	var tag string

	err = runtime.BindStyledParameter("simple", false, "tag", ctx.Param("tag"), &tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTag(ctx, repository, tag)
	return err
}

// Setup converts echo context to params.
func (w *ServerInterfaceWrapper) Setup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Setup(ctx)
	return err
}

// GetCurrentUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetCurrentUser(ctx echo.Context) error {
	var err error

	ctx.Set(Jwt_tokenScopes, []string{""})

	ctx.Set(Basic_authScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCurrentUser(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/auth/groups", wrapper.ListGroups)
	router.POST(baseURL+"/auth/groups", wrapper.CreateGroup)
	router.DELETE(baseURL+"/auth/groups/:groupId", wrapper.DeleteGroup)
	router.GET(baseURL+"/auth/groups/:groupId", wrapper.GetGroup)
	router.GET(baseURL+"/auth/groups/:groupId/members", wrapper.ListGroupMembers)
	router.DELETE(baseURL+"/auth/groups/:groupId/members/:userId", wrapper.DeleteGroupMembership)
	router.PUT(baseURL+"/auth/groups/:groupId/members/:userId", wrapper.AddGroupMembership)
	router.GET(baseURL+"/auth/groups/:groupId/policies", wrapper.ListGroupPolicies)
	router.DELETE(baseURL+"/auth/groups/:groupId/policies/:policyId", wrapper.DetachPolicyFromGroup)
	router.PUT(baseURL+"/auth/groups/:groupId/policies/:policyId", wrapper.AttachPolicyToGroup)
	router.GET(baseURL+"/auth/policies", wrapper.ListPolicies)
	router.POST(baseURL+"/auth/policies", wrapper.CreatePolicy)
	router.DELETE(baseURL+"/auth/policies/:policyId", wrapper.DeletePolicy)
	router.GET(baseURL+"/auth/policies/:policyId", wrapper.GetPolicy)
	router.PUT(baseURL+"/auth/policies/:policyId", wrapper.UpdatePolicy)
	router.GET(baseURL+"/auth/users", wrapper.ListUsers)
	router.POST(baseURL+"/auth/users", wrapper.CreateUser)
	router.DELETE(baseURL+"/auth/users/:userId", wrapper.DeleteUser)
	router.GET(baseURL+"/auth/users/:userId", wrapper.GetUser)
	router.GET(baseURL+"/auth/users/:userId/credentials", wrapper.ListUserCredentials)
	router.POST(baseURL+"/auth/users/:userId/credentials", wrapper.CreateCredentials)
	router.DELETE(baseURL+"/auth/users/:userId/credentials/:accessKeyId", wrapper.DeleteCredentials)
	router.GET(baseURL+"/auth/users/:userId/credentials/:accessKeyId", wrapper.GetCredentials)
	router.GET(baseURL+"/auth/users/:userId/groups", wrapper.ListUserGroups)
	router.GET(baseURL+"/auth/users/:userId/policies", wrapper.ListUserPolicies)
	router.DELETE(baseURL+"/auth/users/:userId/policies/:policyId", wrapper.DetachPolicyFromUser)
	router.PUT(baseURL+"/auth/users/:userId/policies/:policyId", wrapper.AttachPolicyToUser)
	router.GET(baseURL+"/config", wrapper.GetConfig)
	router.GET(baseURL+"/healthcheck", wrapper.HealthCheck)
	router.GET(baseURL+"/repositories", wrapper.ListRepositories)
	router.POST(baseURL+"/repositories", wrapper.CreateRepository)
	router.DELETE(baseURL+"/repositories/:repository", wrapper.DeleteRepository)
	router.GET(baseURL+"/repositories/:repository", wrapper.GetRepository)
	router.GET(baseURL+"/repositories/:repository/actions/runs", wrapper.ListRepositoryRuns)
	router.GET(baseURL+"/repositories/:repository/actions/runs/:run_id", wrapper.GetRun)
	router.GET(baseURL+"/repositories/:repository/actions/runs/:run_id/hooks", wrapper.ListRunHooks)
	router.GET(baseURL+"/repositories/:repository/actions/runs/:run_id/hooks/:hook_run_id/output", wrapper.GetRunHookOutput)
	router.GET(baseURL+"/repositories/:repository/branches", wrapper.ListBranches)
	router.POST(baseURL+"/repositories/:repository/branches", wrapper.CreateBranch)
	router.DELETE(baseURL+"/repositories/:repository/branches/:branch", wrapper.DeleteBranch)
	router.GET(baseURL+"/repositories/:repository/branches/:branch", wrapper.GetBranch)
	router.PUT(baseURL+"/repositories/:repository/branches/:branch", wrapper.ResetBranch)
	router.POST(baseURL+"/repositories/:repository/branches/:branch/commits", wrapper.Commit)
	router.GET(baseURL+"/repositories/:repository/branches/:branch/diff", wrapper.DiffBranch)
	router.DELETE(baseURL+"/repositories/:repository/branches/:branch/objects", wrapper.DeleteObject)
	router.POST(baseURL+"/repositories/:repository/branches/:branch/objects", wrapper.UploadObject)
	router.PUT(baseURL+"/repositories/:repository/branches/:branch/objects", wrapper.StageObject)
	router.POST(baseURL+"/repositories/:repository/branches/:branch/revert", wrapper.RevertBranch)
	router.GET(baseURL+"/repositories/:repository/commits/:commitId", wrapper.GetCommit)
	router.GET(baseURL+"/repositories/:repository/commits/:commitId/runs", wrapper.ListCommitRuns)
	router.GET(baseURL+"/repositories/:repository/metadata/meta_range/:meta_range", wrapper.GetMetaRange)
	router.GET(baseURL+"/repositories/:repository/metadata/range/:range", wrapper.GetRange)
	router.PUT(baseURL+"/repositories/:repository/refs/dump", wrapper.DumpRefs)
	router.PUT(baseURL+"/repositories/:repository/refs/restore", wrapper.RestoreRefs)
	router.POST(baseURL+"/repositories/:repository/refs/:branch/symlink", wrapper.CreateSymlinkFile)
	router.GET(baseURL+"/repositories/:repository/refs/:leftRef/diff/:rightRef", wrapper.DiffRefs)
	router.GET(baseURL+"/repositories/:repository/refs/:ref/commits", wrapper.LogCommits)
	router.GET(baseURL+"/repositories/:repository/refs/:ref/objects", wrapper.GetObject)
	router.GET(baseURL+"/repositories/:repository/refs/:ref/objects/ls", wrapper.ListObjects)
	router.GET(baseURL+"/repositories/:repository/refs/:ref/objects/stat", wrapper.StatObject)
	router.GET(baseURL+"/repositories/:repository/refs/:ref/objects/underlyingProperties", wrapper.GetUnderlyingProperties)
	router.POST(baseURL+"/repositories/:repository/refs/:sourceRef/merge/:destinationBranch", wrapper.MergeIntoBranch)
	router.GET(baseURL+"/repositories/:repository/tags", wrapper.ListTags)
	router.POST(baseURL+"/repositories/:repository/tags", wrapper.CreateTags)
	router.DELETE(baseURL+"/repositories/:repository/tags/:tag", wrapper.DeleteTag)
	router.GET(baseURL+"/repositories/:repository/tags/:tag", wrapper.GetTag)
	router.POST(baseURL+"/setup_lakefs", wrapper.Setup)
	router.GET(baseURL+"/user", wrapper.GetCurrentUser)

}

