// Package oa3 provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oa3

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

